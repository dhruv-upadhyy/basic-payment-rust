openapi: 3.0.3
info:
  title: Dodo Payments Assignment API
  version: 1.0.0
servers:
  - url: http://localhost:3000

paths:
  /users:
    post:
      summary: Register a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/login:
    post:
      summary: User login
      operationId: loginUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUser
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update user
      operationId: updateUser
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete user
      operationId: deleteUser
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /accounts:
    post:
      summary: Create account
      operationId: createAccount
      tags:
        - Accounts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '200':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: List accounts
      operationId: listAccounts
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /accounts/{id}:
    get:
      summary: Get account by ID
      operationId: getAccount
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update account
      operationId: updateAccount
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
      responses:
        '200':
          description: Account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete account
      operationId: deleteAccount
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Account deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /accounts/{id}/deposit:
    post:
      summary: Deposit funds
      operationId: depositFunds
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
      responses:
        '200':
          description: Deposit successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /accounts/{id}/withdraw:
    post:
      summary: Withdraw funds
      operationId: withdrawFunds
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawalRequest'
      responses:
        '200':
          description: Withdrawal successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Invalid request or insufficient funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /transactions:
    post:
      summary: Create transaction
      operationId: createTransaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '200':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: List transactions
      operationId: listTransactions
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: account_id
          in: query
          description: Account ID to filter by
          schema:
            type: string
            format: uuid
        - name: transaction_type
          in: query
          description: Transaction type to filter by
          schema:
            type: string
            enum: [DEPOSIT, WITHDRAWAL]
        - name: status
          in: query
          description: Transaction status to filter by
          schema:
            type: string
            enum: [PENDING, COMPLETED, FAILED]
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /transactions/{id}:
    get:
      summary: Get transaction by ID
      operationId: getTransaction
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Transaction ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Transaction found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /transactions/{id}/status:
    put:
      summary: Update transaction status
      operationId: updateTransactionStatus
      tags:
        - Transactions
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Transaction ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTransactionStatusRequest'
      responses:
        '200':
          description: Transaction status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: AUTH_FAILED
            message:
              type: string
              description: Error message
              example: Unauthorized access
    
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: Test User
        email:
          type: string
          format: email
          example: test@example.com
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: Test User
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: testPassword!
    
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: Test User2
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: newTestPassword!
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: testPassword!
    
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    
    Account:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        user_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        balance:
          type: number
          format: decimal
          example: 1000.50
        currency:
          type: string
          example: INR
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    CreateAccountRequest:
      type: object
      properties:
        currency:
          type: string
          example: INR
        initial_balance:
          type: number
          format: decimal
          example: 100.00
    
    UpdateAccountRequest:
      type: object
      properties:
        currency:
          type: string
          example: USD
    
    DepositRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          format: decimal
          example: 50.00
        description:
          type: string
          example: Test deposit
    
    WithdrawalRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          format: decimal
          example: 25.00
        description:
          type: string
          example: Test withdrawal
    
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        account_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        amount:
          type: number
          format: decimal
          example: 50.00
        transaction_type:
          type: string
          enum: [DEPOSIT, WITHDRAWAL]
          example: DEPOSIT
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
          example: COMPLETED
        description:
          type: string
          example: Salary deposit
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    CreateTransactionRequest:
      type: object
      required:
        - account_id
        - amount
        - transaction_type
      properties:
        account_id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        amount:
          type: number
          format: decimal
          example: 50.00
        transaction_type:
          type: string
          enum: [DEPOSIT, WITHDRAWAL]
          example: DEPOSIT
        description:
          type: string
          example: Salary deposit
    
    UpdateTransactionStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
          example: COMPLETED
